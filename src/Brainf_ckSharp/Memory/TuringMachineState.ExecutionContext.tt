<#@ template language="C#"
#><#@ assembly name="System.Core"
#><#@ assembly name="$(TargetDir)Brainf_ckSharp.dll"
#><#@ assembly name="NetStandard"
#><#@ import namespace="System.Collections.Generic"
#><#@ import namespace="Brainf_ckSharp.Enums"
#><#@ output extension=".g.cs" #>
<#
var cellTypes = new Dictionary<OverflowMode, string>
{
    [OverflowMode.UshortWithNoOverflow] = "ushort",
    [OverflowMode.UshortWithOverflow] = "ushort",
    [OverflowMode.ByteWithNoOverflow] = "byte",
    [OverflowMode.ByteWithOverflow] = "byte",
};
#>
using System;
using System.Diagnostics.Contracts;
using System.Runtime.CompilerServices;
using Brainf_ckSharp.Enums;
using Brainf_ckSharp.Memory.Interfaces;
using Microsoft.Toolkit.HighPerformance.Extensions;

#pragma warning disable IDE0032

namespace Brainf_ckSharp.Memory
{
    /// <summary>
    /// A <see langword="class"/> that represents the state of a Turing machine
    /// </summary>
    internal sealed partial class TuringMachineState<T>
    {
        /// <summary>
        /// Gets an execution context of the specified type
        /// </summary>
        /// <typeparam name="TExecutionContext">The type of execution context to retrieve</typeparam>
        /// <returns>An execution context of the specified type</returns>
        [Pure]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        private unsafe TExecutionContext GetExecutionContext<TExecutionContext>()
            where TExecutionContext : struct, IMachineStateExecutionContext
        {
            // The underlying buffer is guaranteed not to be null or unpinned here
            T* ptr = (T*)Unsafe.AsPointer(ref _Buffer.DangerousGetReference());

<#
foreach (var mode in (OverflowMode[])Enum.GetValues(typeof(OverflowMode)))
{
    var ptrType = cellTypes[mode];
#>
            if (typeof(TExecutionContext) == typeof(<#=mode#>ExecutionContext))
            {
                var executionContext = new <#=mode#>ExecutionContext((<#=ptrType#>*)ptr, Size - 1, _Position);

                return Unsafe.As<<#=mode#>ExecutionContext, TExecutionContext>(ref executionContext);
            }

<#
}
#>
            throw new ArgumentException($"Invalid context type: {typeof(TExecutionContext)}", nameof(TExecutionContext));
        }
<#
foreach (var mode in (OverflowMode[])Enum.GetValues(typeof(OverflowMode)))
{
    WriteLine("");

    string cellType = cellTypes[mode];
#>
        /// <summary>
        /// A <see langword="struct"/> implementing <see cref="IMachineStateExecutionContext"/> for <see cref="OverflowMode.<#=mode#>"/>
        /// </summary>
        public unsafe struct <#=mode#>ExecutionContext : IMachineStateExecutionContext
        {
            private readonly <#=cellType#>* Ptr;
            private readonly int MaxIndex;
            private int _Position;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public <#=mode#>ExecutionContext(<#=cellType#>* ptr, int maxIndex, int position)
            {
                Ptr = ptr;
                MaxIndex = maxIndex;
                _Position = position;
            }

            /// <inheritdoc/>
            public int Position
            {
                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                get => _Position;
            }

            /// <inheritdoc/>
            public ushort Current
            {
                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                get => Ptr[_Position];
            }

            /// <inheritdoc/>
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool TryMoveNext()
            {
                if (_Position != MaxIndex)
                {
                    _Position++;

                    return true;
                }

                return false;
            }

            /// <inheritdoc/>
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool TryMoveNext(int count, ref int totalOperations)
            {
                if (_Position + count <= MaxIndex)
                {
                    totalOperations += count;

                    _Position += count;

                    return true;
                }

                totalOperations += MaxIndex - _Position;

                _Position = MaxIndex;

                return false;
            }

            /// <inheritdoc/>
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool TryMoveBack()
            {
                if (_Position != 0) 
                {
                    _Position--;

                    return true;
                }

                return false;                
            }

            /// <inheritdoc/>
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool TryMoveBack(int count, ref int totalOperations)
            {
                if (_Position - count >= 0)
                {
                    totalOperations += count;

                    _Position -= count;

                    return true;
                }

                totalOperations += _Position;

                _Position = 0;

                return false;
            }

            /// <inheritdoc/>
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool TryIncrement()
            {
                <#=cellType#>* current = Ptr + _Position;

<#
// Setup the correct increment code
switch (mode)
{
    case OverflowMode.UshortWithNoOverflow:
    case OverflowMode.ByteWithNoOverflow:
#>
                if (*current != <#=cellType#>.MaxValue)
                {
                    *current = unchecked((<#=cellType#>)(*current + 1));

                    return true;
                }
                
                return false;
<#
        break;
    case OverflowMode.UshortWithOverflow:
    case OverflowMode.ByteWithOverflow:
#>
                *current = unchecked((<#=cellType#>)(*current + 1));

                return true;
<# 
        break;
    default: throw new ArgumentException($"Invalid overflow mode: {mode}", nameof(mode));
}
#>
            }

            /// <inheritdoc/>
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool TryIncrement(int count, ref int totalOperations)
            {
                <#=cellType#>* current = Ptr + _Position;

<#
// Setup the correct increment code
switch (mode)
{
    case OverflowMode.UshortWithNoOverflow:
    case OverflowMode.ByteWithNoOverflow:
#>
                if (*current + count <= <#=cellType#>.MaxValue)
                {
                    *current = unchecked((<#=cellType#>)(*current + count));

                    totalOperations += count;

                    return true;
                }

                totalOperations += <#=cellType#>.MaxValue - *current;

                *current = <#=cellType#>.MaxValue;

                return false;
<#
        break;
    case OverflowMode.UshortWithOverflow:
    case OverflowMode.ByteWithOverflow:
#>
                *current = unchecked((<#=cellType#>)(*current + count));

                totalOperations += count;

                return true;
<# 
        break;
    default: throw new ArgumentException($"Invalid overflow mode: {mode}", nameof(mode));
}
#>
            }

            /// <inheritdoc/>
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool TryDecrement()
            {
                <#=cellType#>* current = Ptr + _Position;

<#
// Setup the correct decrement code
switch (mode)
{
    case OverflowMode.UshortWithNoOverflow:
    case OverflowMode.ByteWithNoOverflow:
#>
                if (*current != 0)
                {
                    *current = (<#=cellType#>)(*current - 1);

                    return true;
                }

                return false;
<#
        break;
    case OverflowMode.UshortWithOverflow:
    case OverflowMode.ByteWithOverflow:
#>
                *current = unchecked((<#=cellType#>)(*current - 1));

                return true;
<#
        break;
    default: throw new ArgumentException($"Invalid overflow mode: {mode}", nameof(mode));
}
#>
            }

            /// <inheritdoc/>
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool TryDecrement(int count, ref int totalOperations)
            {
                <#=cellType#>* current = Ptr + _Position;

<#
// Setup the correct decrement code
switch (mode)
{
    case OverflowMode.UshortWithNoOverflow:
    case OverflowMode.ByteWithNoOverflow:
#>
                if (*current >= count)
                {
                    *current = (<#=cellType#>)(*current - count);

                    totalOperations += count;

                    return true;
                }

                totalOperations += *current;

                *current = 0;

                return false;
<#
        break;
    case OverflowMode.UshortWithOverflow:
    case OverflowMode.ByteWithOverflow:
#>
                *current = unchecked((<#=cellType#>)(*current - count));

                totalOperations += count;

                return true;
<#
        break;
    default: throw new ArgumentException($"Invalid overflow mode: {mode}", nameof(mode));
}
#>
            }

            /// <inheritdoc/>
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool TryInput(char c)
            {
                <#=cellType#>* current = Ptr + _Position;

<#
// Setup the correct input code
switch (mode)
{
    case OverflowMode.UshortWithNoOverflow:
    case OverflowMode.UshortWithOverflow:
#>
                *current = c;

                return true;
<#
        break;
    case OverflowMode.ByteWithNoOverflow:
#>
                if (c <= byte.MaxValue)
                {
                    *current = unchecked((<#=cellType#>)c);

                    return true;
                }

                return false;
<#
        break;
    case OverflowMode.ByteWithOverflow:
#>
                *current = unchecked((byte)c);

                return true;
<#
        break;
    default: throw new ArgumentException($"Invalid overflow mode: {mode}", nameof(mode));
}
#>
            }

            /// <inheritdoc/>
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public void ResetCell() => Ptr[_Position] = 0;
        }
<#    
}
#>
    }
}
